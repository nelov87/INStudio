@page "/Administration/Skils/All"
@inject ICarouselService carouselService
@inject ApplicationDbContext db
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment env
@using INStudio.Areas.Administration.Shared
@inject INStudio.Services.ISkilsService skilsService
@using Microsoft.EntityFrameworkCore
@using Blazored.Toast
@using Blazored.Toast.Services
@inject IToastService toastService

<div class="content-wrapper">
    <section class="content">
        <div class="row">

          <div class="col-12">
            <div class="card">
              <div class="card-header">
                <h3 class="card-title">Responsive Hover Table</h3>

                <div class="card-tools">
                  <div class="input-group input-group-sm" style="width: 150px;">
                    <input type="text" name="table_search" class="form-control float-right" placeholder="Search">

                    <div class="input-group-append">
                      <button type="submit" class="btn btn-default"><i class="fas fa-search"></i></button>
                    </div>
                  </div>
                </div>toastService.ShowToast(ToastLevel.Info, message);-body table-responsive p-0">
                <table class="table table-hover text-nowrap">
                  <thead>
                    <tr>
                      <th>Title</th>
                      <th>Content</th>
                      <th>Image</th>
                      <th>Action</th>
                      
                    </tr>
                  </thead>
                  <tbody>
                    @foreach (var item in @skilsList)
                    {
                        <tr>
                            
                            <td>
                                @item.Title
                            </td>
                            <td>
                                @item.Content
                            </td>
                            <td>
                                 @if(item.ImageId != null)
                                 {
                                   //@GetMedia(item.ImageId)
                                   //@item.ImageId
                                   <img src="@GetMedia(item.ImageId)" alt="Girl in a jacket" width="100" height="auto"> 
                                 }
                                 else
                                 {
                                   <span>picture</span>
                                 }
                            </td>
                            
                            <td>
                                <a @onclick='() => DeleteItem(item.Id)' class="btn btn-outline-danger"><i class="far fa-trash-alt"></i></a>
                            </td>
                        </tr>
                    }
                  </tbody>
                </table>
              </div>
              <!-- /.card-body -->
            </div>
            <!-- /.card -->
            
          </div>
        
        </div>
    </section>


    


    <section class="content">
      <div class="row">

          <div class="col-md-10">
            <!-- general form elements -->
            <div class="card card-primary">
              <div class="card-header">
                <h3 class="card-title">Quick Example</h3>
              </div>
              <!-- /.card-header -->
              <!-- form start -->
              <EditForm id="@pageId" Model="@skilModel" OnSubmit="@HandleValidSubmit" >
                <ChildContent Context="another_name">
                  <DataAnnotationsValidator/>
                <div class="card-body">
                  <div class="form-group">
                    <label for="skilModel.Title">Title</label>
                    <InputText class="form-control" @bind-Value="skilModel.Title"/>
                  </div>
                  <div class="form-group">
                    <label for="skilModel.Content">Content</label>
                    <Textarea @bind-Value="skilModel.Content" />
                    @* <InputText class="form-control" @bind-Value="skilModel.Content"/> *@
                  </div>
                  
                  <div class="form-group">
                    
                    <button type="button" class="btn btn-primary" @onclick="@(() => OpenModal())">Add Image</button>
                  </div>
                  <button type="submit"class="btn btn-success">Save</button> 
                  

                  <h3>@Message</h3>
                </div>
                <!-- /.card-body -->
                </ChildContent>
              </EditForm>
                <div class="card-footer">
                  @* <button form="@pageId" type="submit" class="btn btn-success">Запиши</button> *@
                  <form @onsubmit="OnSubmit">
                    <InputFile class="btn btn-block btn-secondary" OnChange="OnInputFileChange" multiple maxAllowedSize="1000000"/>
                    <br /><br />
                    <button class="btn btn-primary" type="submit">Качи на сървъра</button>
                  </form>
                  <button class="btn btn-info" @onclick="@(() => toastService.ShowInfo("I'm an INFO message"))">Info Toast</button>
                </div>
                
              
            </div>
            <!-- /.card -->

            
            

          </div>
          <!-- /div col-6 /.col (left) -->


          <div class="col-md-2">
              <!-- general form elements disabled -->
            <div class="card card-warning">
              <div class="card-header">
                <h3 class="card-title">General Elements</h3>
              </div>
              <!-- /.card-header -->
              <div class="card-body">
                


              </div>
              <!-- /.card-body -->
            </div>
            <!-- /.card -->
          </div>


      </div>
    </section>
    <!-- /.content -->


@if(showModal)
{
<div class="modal" tabindex="-1" ig="modal-ld" style="display:block" role="dialog">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h4 class="modal-title">Large Modal</h4>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <p>One fine body&hellip;</p>
              <div id="scrollable-content">
                                <ul>
                                    @foreach (var image in @mediaList)
                                    {
                                        <li>
                                            <input type="checkbox" id="cb\@image.Title" @onchange="eventArgs => { CheckboxClicked(image, eventArgs.Value); }" />
                                            <label for="cb\@image.Title"><img src="@image.Path" /></label>
                                        </li>

                                    }
                                </ul>
                            </div>
            </div>
            <div class="modal-footer justify-content-between">
              <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => CloseModal()">Close</button>
              <button type="button" class="btn btn-primary">Save changes</button>
            </div>
          </div>
          <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
      </div>
      <!-- /.modal -->
}


</div>




@code
{
string pageId = "abv";
bool showModal = false;
string Message = "Не са избрани файлове.";
private HashSet<INMedia> mediaList;
IReadOnlyList<IBrowserFile> selectedFiles;
private HashSet<Skils> skilsList;
  private Skils skilModel = new Skils();



void GetAllMedias()
{
  this.mediaList = db.INMedias.ToHashSet();
}

protected override void OnInitialized()
{
    base.OnInitialized();
    
    GetAllMedias();
    skilsList = this.db.Skils.Include(x => x.Image).ToHashSet();
    //Carousel cc = new Carousel(){Title = "nnnn", Description = "mmmmm", Link = "ccc", Number = 2 };
    //this.carouselService.AddCarousel(cc);
    StateHasChanged();
}

void HandleValidSubmit(EditContext editContext)
  {
    
      
    
    bool operationOk = this.skilsService.AddSkill(skilModel);

    if(operationOk)
    {
      toastService.ShowToast(ToastLevel.Success, "Added Sucsesfuly!");
    }
    else
    {
      toastService.ShowToast(ToastLevel.Error, "Not added!");
    }

    
    skilsList = this.skilsService.GetAllSkils().ToHashSet();
    skilModel = new Skils();
    StateHasChanged();
  }

  void DeleteItem(string id)
  {
    bool operationOk = this.skilsService.DeleteSkill(id);

    if(operationOk)
    {
      toastService.ShowToast(ToastLevel.Success, "Deleted Sucsesfuly!");
    }
    else
    {
      toastService.ShowToast(ToastLevel.Error, "Not deleted!");
    }
    //Skils skilToDelete = this.db.Skils.FirstOrDefault(x => x.Id == id);
    //this.db.Skils.Remove(skilToDelete);
    //this.db.SaveChanges();
    skilsList = this.db.Skils.ToHashSet();
    StateHasChanged();
  }

  void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} избран файл.";
        this.StateHasChanged();
    }

    async void OnSubmit()
    {
        foreach (var file in selectedFiles)
        {
            string giud = Guid.NewGuid().ToString();
            Stream stream = file.OpenReadStream(500000000);
            var filePath = "/Uploads/" + giud + file.Name;
            var cwrf = env.WebRootPath;
            var path = Path.Combine(cwrf, "Uploads", giud + file.Name);
            FileStream fs = File.Create(path);

            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();
            INMedia img = new INMedia();
            img.Title = file.Name;
            img.Path = filePath;
            img.Description = "";
            
            this.db.INMedias.Add(img);
            GetAllMedias();
            this.db.SaveChanges();
        }
        Message = $"{selectedFiles.Count} файлове качени на сървъра.";
        GetAllMedias();
        this.StateHasChanged();
    }

    void CheckboxClicked(INMedia image, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            skilModel.ImageId = image.Id;
        }
        else
        {
            
        }
    }

    void OpenModal()
    {
      showModal = true;
      StateHasChanged();
    }

    void CloseModal()
    {
      showModal = false;
      StateHasChanged();
    }

string GetMedia(string mediaId)
{
  
  string path = this.mediaList.FirstOrDefault(x => x.Id == mediaId).Path;
  return path;
}

}